#!/usr/bin/python

##### INFORMATION ######################################################################################################
### @PROJECT_NAME:		SPLAT: Speech Processing and Linguistic Annotation Tool										 ###
### @VERSION_NUMBER:																								 ###
### @PROJECT_SITE:		github.com/meyersbs/SPLAT																     ###
### @AUTHOR_NAME:		Benjamin S. Meyers																			 ###
### @CONTACT_EMAIL:		bsm9339@rit.edu																				 ###
### @LICENSE_TYPE:																									 ###
########################################################################################################################


##### IMPORTS ##########################################################################################################
import sys
from splat_src.splat_functions import *
########################################################################################################################


##### GLOBAL VARIABLES #################################################################################################
commands = {'--usage':      print_usage_instructions,       '--version':    version_info,
			'--info':       info,                           '--commands':   display_command_list,
			'tokens':       get_tokens,                     'types':        get_types,
			'wc':           get_word_count,                 'uwc':          get_unique_word_count,
			'ttr':          get_ttr,                        'pos':          tag_pos,
			'poscounts':    get_pos_counts,                 'plotfreq':     plot_freq_dist,
			'mostfreq':     get_most_frequent,              'leastfreq':    get_least_frequent,
			'utterances':   list_utterances,                'alu':          get_avg_utterance_length,
			'lcw':          get_content_words,              'lucw':         get_unique_content_words,
			'lfw':          get_function_words,             'lufw':         get_unique_function_words,
			'cfr':          get_content_function_ratio,     'normalize':    normalize_text,
			'numutts':      get_num_utterances,             'disfluencies': count_disfluencies,
			'wpu':          get_words_per_utterance,		'dpu':          get_disfluencies_per_utterance,
			'drawtrees':    draw_trees,						'parsetrees':   print_formatted_trees,
			'cdensity':     calc_content_density,			'idensity':     calc_idea_density,
			'--help':       print_help,						'yngve':        get_yngve_score,
			'frazier':      get_frazier_score,				'ism':          insert_speaker_markers,
			'iqm':          insert_quarteroni_markers,		'rsm':          remove_speaker_markers,
			'rqm':          remove_dialog_acts,				'iub':          insert_utterance_boundaries,
			'rub':          remove_utterance_boundaries,	'imm':          insert_meyers_markers,
			'rmm':          remove_dialog_acts,				'maxdepth':     print_max_depths,
			'mmstats':      get_meyers_metrics,				'temp':         strip_annotation}
########################################################################################################################


##### MAIN #############################################################################################################
def main():
	if sys.argv[1] == '--multi' and sys.argv[2] in commands.keys():
		for i in range(3, len(sys.argv)):
			print(commands[sys.argv[2]](sys.argv[i]))
	elif len(sys.argv) == 2 and sys.argv[1] in commands.keys():
		print(commands[sys.argv[1]]())
	elif len(sys.argv) == 3 and sys.argv[1] in commands.keys():
		print(commands[sys.argv[1]](sys.argv[2]))
	elif len(sys.argv) == 4 and sys.argv[1] in commands.keys():
		print(commands[sys.argv[1]](sys.argv[2], sys.argv[3]))
	else:
		print_usage_instructions()


if __name__ == "__main__":
	main()
########################################################################################################################
